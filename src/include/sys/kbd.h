/**
* \file kbd.h
*/

#ifndef __KBD_H
#define __KBD_H


#define KBD_FLAGS_MASK_PRESSED (1 << 0)

// 2 bits for keytype
#define KBD_FLAGS_MASK_KEYTYPE  (3 << 1)
	#define KBD_FLAGS_MASK_KEYPAD (0 << 1)
	#define KBD_FLAGS_MASK_APIC   (1 << 1)
	#define KBD_FLAGS_MASK_MM     (2 << 1)
	#define KBD_FLAGS_MASK_PRINT  (3 << 1)

#define KBD_FLAGS_MASK_SHIFT     (1 << 3)
#define KBD_FLAGS_MASK_CTRL      (1 << 5)
#define KBD_FLAGS_MASK_ALT       (1 << 6)

#define KBD_FLAGS_MASK_CAPSLOCK    (1 << 10)
#define KBD_FLAGS_MASK_SCROLLOCK   (1 << 11)
#define KBD_FLAGS_MASK_NUMLOCK     (1 << 12)


#define KBD_FLAG_MASK_PEND_MORE (1 << 7)


/**
* One keyboard action, as generated by the keyboard driver.
*/
typedef struct	{
	uint32_t flags;
	uint16_t key_code;
	uint32_t timestamp;
} keyboard_action;


#define KBD_MAX_PEND_SCANCODES 8

typedef struct	{
	/**
	 * Store the state of some keys that we continously include in the keyboard
	 * packet.
	*/
	uint32_t keyboard_state;
	uint8_t pending_scancodes[KBD_MAX_PEND_SCANCODES];
	uint8_t curr_pending;
} keyboard_state;


typedef struct	{
	uint32_t array_size;
	uint32_t* key_codes;

} __attribute__((packed)) scancode_set;


typedef struct	{
	uint8_t kc;
	uint8_t flag;
} __attribute__((packed)) sc_kc;

typedef struct	{
	sc_kc map[256];
} __attribute__((packed)) sc_kc_map;

void kbd_add_scancode(uint8_t sc);

#endif
